

- Dosier de teoria
- Repository de github amb exemples i solucions





- Toy IO, monad for effect vs future. Fp for mortals?
https://medium.com/wix-engineering/demystifying-functional-effect-systems-in-scala-14419039a423

- Model d'actors. Reactive paradigm, akka streams, reactive manifesto
- Java virtual threads. Java 21





- Rediseño de almacén automático con Actores.

  https://www.youtube.com/watch?v=x4wzLLYEv9g
  
  Cuando la caja pasa por un punto de notificación manda un mensaje que contiene: boxId, locationId, additionalData
  Al recibir una notificación de una caja en un punto hay que aplicar reglas de negocio: 
  	- actualizar el estado
  	- responder con un mensaje que contiene un transporte
  
   ______________________________	
  |				 |	 
  |  Warehouse Management System |	
  |______________________________|  
  |				 |	 
  |      Transport System        |	
  |______________________________|  
  |				 |	 
  |          Hardware            |	
  |______________________________| 	
  
  	
  
  Notificacióm: TS ---- LC1, Position1 ----> WMS 
  Respuesta:    WMS ---- LC1, Transport(A -> B) ----> TS
  
  
  Layout Subsistema de entradas: Proceso de entradas hasta celda
  
  
  
											   ___________________________
									     BigBoxAisle  |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
											  |_|_|_|_|_|_|_|_|_|_|_|_|_|_|
										     	ʌ |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
										     	| |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
										        y |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
  											  x->	
  												
  InitialScannerScale -> VolumetricScanner (wide, length, high) -> BigBoxAislePickUp  
	|	  	           |	                        -> LittleBoxAislePickUp
	v	                   v
     Reject1    	        Reject2
  	                                                                                   ___________________________
  									  LittleBoxAisle  |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
											  |_|_|_|_|_|_|_|_|_|_|_|_|_|_|
										     	ʌ |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
										     	| |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
										        y |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
  											  x->												
  
  
  
  Dominio:
  
  case class Box(barcodeId: String, width: Int, height: Int, length: Int)
  
  trait WharehouseLocation
  case class ConveyorPoint(name: String)
  case class Silo(aisle: Int, x: Int, y: Int)
  
  case class Transaport(origin: WharehouseLocation, destination: destination: WharehouseLocation, status: TransaportStatus)
  
  trait LocationAlgorithm{
   	def 
  }
  
  
  PROBLEMA: 
  	Dado que hay métricas críticas de flujo de cajas en determinados puntos
  
  
  Por threads: 
  	Cada mensaje es procesado por un thread 'tradicional' (de sistema operativo). En el procesado se realizan llamadas bloqueantes a base de datos.
  
  
  
  Actor por caja: Estado 
  
  
  
  class LoadCarrierActor(id: String, position: WharehouseLocation, transporte: Option[Transaport], lastLocationSeen: WharehouseLocation)
  
  
 
  
  
  
