
- Toy IO, monad for effect vs future. Fp for mortals?
https://medium.com/wix-engineering/demystifying-functional-effect-systems-in-scala-14419039a423


- Rediseño de almacén automático con Actores.

  https://www.youtube.com/watch?v=x4wzLLYEv9g

  Visión simplificada de los elementos un almacén automatizado:

	- SKU: Stock Keeping Units. Cajas cartón, cubetas, etc.. Se identifican con un tag RFID
  	- Elementos de transporte: Cintas transportadoras
	- Estanterías de almacenaje de SKU.
	- SRM: Storage and Retrieve Machine. Coje SKU de cinta transportadora y la pone en la estantería.
  
  En distintos puntos del almacen se dispone de lectores RFID. En estos puntos el hardware notifica al software con un mensaje	
  que contiene que contiene: boxId, locationId, additionalData.


  Para el propósito de este ejercicio nos vamos a centrar en el circuito de entradas.
  Circuito en el que se descargan las cajas del camión, y tras passar una serie de controles
  se transportan por cinta hasta los SRM que las almacenan en las estanterías con cierto criterio.
  Por simplicidad, vamos a verificar que las cajas no excedan de un determinado peso y según el volumen que vamos a obtener de un escaner volumétrico,
  las vamos a clasificar en dos categorías: pequeñas y grandes.


Layout Subsistema de entradas: Proceso de entradas hasta celda
  
  
  
											   ___________________________
									     BigBoxAisle  |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
											  |_|_|_|_|_|_|_|_|_|_|_|_|_|_|
										     	ʌ |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
										     	| |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
										        y |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
  											  x->	
  												
  InitialScale --------> VolumetricScanner (wide, length, high) -> BigBoxAislePickUp  
	|	  	           |	                        -> LittleBoxAislePickUp
	v	                   v
     Reject1    	        Reject2
  	                                                                                   ___________________________
  									  LittleBoxAisle  |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
											  |_|_|_|_|_|_|_|_|_|_|_|_|_|_|
										     	ʌ |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
										     	| |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
										        y |_|_|_|_|_|_|_|_|_|_|_|_|_|_| 
  											  x->				


 

  El sistema tiene dos capas WMS y Hardware/Transaport System

 - WMS: Se encarga de los procesos logísticos (entradas, preparaación de pedidos, etc...)
   y de mantener el mapa de almacén (dónde está y qué contiene cada caja)
 - Hwd/Ts: Se encarga de interactuar con la maquinaria. Ejecuta transportes para mover cajas de un punto a otro del almacén
   

   ______________________________	
  |				 |	 
  |  Warehouse Management System |	
  |______________________________|  
  |				 |	 
  |  Hardware / Transport System |	
  |______________________________| 	

Al recibir una notificación de una caja en un punto hay que aplicar reglas de negocio: 
  	- actualizar el estado. Actualizar la ubicación de la caja
	- decidir qué hacer con la caja en base a las reglas de negocio
  	- responder con un mensaje que contiene un transporte

  Esta sería la secuencia de mensajes para el proceso de entrada del layout anterior:

	1- WMS recibe mensaje de InitialScannerScale. Contenido: boxId = 1, locationId= InitialScannerScale, additionalData = peso : 10Kg
	2- WMS registra que la caja 1 se encuentra en InitialScannerScale
	3- WMS aplica regla de negocio. Como el peso es menor que el máximo se genera un transporte para la caja 1 de InitialScannerScale a VolumetricScanner
	4- WMS manda en mensaje de transporte a la capa Hwd/TS que lo ejecuta
	5- WMS recibe un mensaje conforme la caja ha llegado a VolumetricScanner. Contenido: boxId = 1, locationId= VolumetricScanner, additionalData = x : 10, y : 24, z : 5
	6- WMS calcula volumen y decide que la caja es pequeña. Crea transporte a LittleBoxAislePickUp
        7- WMS recibe mensaje que boxId = 1, locationId= LittleBoxAislePickUp
	8- WMS busca celda vacía en estantería y envia transporte a celda

  	

  Dominio:
  
  case class Box(barcodeId: String, width: Int, height: Int, length: Int)
  
  trait WharehouseLocation
  case class ConveyorPoint(name: String)
  case class Silo(aisle: Int, x: Int, y: Int)
  
  case class Transaport(origin: WharehouseLocation, destination: destination: WharehouseLocation, status: TransaportStatus)
  
  trait LocationAlgorithm{
   	def 
  }
  
  
  PROBLEMA: 

  La empresa que está comercializando este software de almacén cada vez vente almacenes más grandes y con unos flujos de cajas más exigentes.
  En el diseño inicial, cada mensaje proviniente de Hwd/TS se cursa en un thread que termina cuando se ha generado la reacción pertinente (normalmente enviar un transporte)   
  Sin embargo este diseño presenta problemas de escalabilidad. Cuando hay muchas cajas en el systema aparecen retardos en la creación de transportes y 
  no se alcanzan las métricas deseadas en cuanto al flujo de cajas en determinados puntos.

  1- Se pide rediseñar el sistema de WMS con un cambio de paradigma enfocado a la alta concurrencia.
  La respuesta debe incluir qué unidad de concurrencia se va a escojer.

  2- Como el pasillo de cajas pequeñas está muy lleno se decide ampliar el almacén añadiendo otro pasillo de cajas pequeñas. Ahora hay LittleBoxAislePickUp01 y LittleBoxAislePickUp02. Cuando una caja llega al scanner volumétrico tengo que balancear las cajas pequeñas entre uno y otro en base a los transportes en curso con destino LittleBoxAislePickUp01 y LittleBoxAislePickUp02. Como encajarías esta necesidad en el sistema? Cómo obtendías estos transportes de forma eficiente?
  	


  SOLUCIÓN:

  1- Actor por caja: Estado 
	class LoadCarrierActor(id: String, position: WharehouseLocation, transporte: Option[Transaport], lastLocationSeen: WharehouseLocation)
     El estado es el asociado a la caja:
	- Ubicación
        - Peso y medidas 
	- Transporte activo

    Si pensamos la caja como una Event Sourced Entity, tenemos la história de la caja como una sucesion de eventos: 
	LocationNotification, TransportCreated, TransportCompleted

     
    Escalabilidad: Permite millones de cajas cambiando su estado de una forma altamente concurrente
    Escalable con el flujo de cajas.

    NOTA: Un actor por punto de almacén me permite escalar con las dimensiones del almacén pero no con el flujo de cajas
   
  2- Añadir un Actor por punto de almacén (LittleBoxAislePickUp01 y LittleBoxAislePickUp02)
	Cuando se crea un transporte a estos destinos, se manda un mensaje al actor correspondiente informando del transporte creado.
	De esta forma el actor me sirve como rejistro de transportes.

-------------------------------------------------------------------------------------------------------


Ejercicio: 
	Uso de monada de manejo de errores: Option, Either o Try
	Monoid y Semigroup

Dado el siguiente dominio:

trait Location
case class Transport(origin: Location, destination: Location)

1- Definir e implementar una función de composición de transportes.  
2- Se podría considerar Transporte y su composición un Semigroup? y un Monoid?

SOLUCION:

1- def compose(ta: Transport, tb: Transport): Option[Transport] = {
    if(ta.destination == tb.origin)
      Some(Transport(ta.origin, tb.destination))
    else
      None
  }
2- Para un Semigroup necesitamos un conjunto/typo, Transport en este caso, y también una operación associativa, la composición de transportes lo es.
si A->B cmp B->C = A->C
A->B cmp (B->C  cmp C->D) === (A->B cmp B->C) cmp C->D

Para un monoide haría falta un elemento Zero que podria ser B->B
A->B cmp B->B = A-> B
Pero no tendríamos un elemento Zero universal sino que dependería del transporte donde se aplicara 
   

-------------------------------------------------------------------------------------------------------
Comentar ImpureComputations en clase. Sirve también para introducir lenguaje Scala

object ImpureComputations {

  def printMessage(msg: String): Unit = {
    println(s"Message: $msg")
  }
  ////////////////////////////////////////////////////
  var counter: Int = 0

  def incrementCounter(): Unit = {
    counter += 1
  }
  ////////////////////////////////////////////////////
  val listBuffer = scala.collection.mutable.ListBuffer(1, 2, 3)

  def addElement(elem: Int): Unit = {
    listBuffer += elem
  }

  ///////////////////////////////////////////////////

  def fillList(num: Int): List[Int] = {
    var c = 0
    val list = scala.collection.mutable.ListBuffer[Int]()
    while(c < num){
      list.addOne(c)
      c = c + 1
    }
    list.toList
  }

  ////////////////////////////////////////////////////
  def readUserInput(): String = {
    scala.io.StdIn.readLine() // Side effect: depends on external input
  }
  ////////////////////////////////////////////////////
  def divide(a: Int, b: Int): Int = {
    if (b == 0) throw new ArithmeticException("Division by zero!")
    else a / b
  }
  ////////////////////////////////////////////////////
  def writeFile(filename: String, content: String): Unit = {
    val writer = new PrintWriter(new File(filename))
    writer.write(content)
    writer.close()
  }
  ////////////////////////////////////////////////////
  def getCurrentTime(): Long = {
    System.currentTimeMillis()
  }

  ///////////////////////////////////////////////////
  def getRandomNumber(): Int = {
    Random.nextInt(100)
  }

  ///////////////////////////////////////////////////

  import scala.io.Source
  
  def fetchWebPage(url: String): String = Source.fromURL(url).mkString
    

  ///////////////////////////////////////////////////
  import java.sql.{Connection, DriverManager}

  def insertIntoDatabase(): Unit = {
    val connection: Connection = DriverManager.getConnection("jdbc:h2:mem:test")
    val statement = connection.createStatement()
    statement.executeUpdate("CREATE TABLE users (id INT, name VARCHAR(100))")
    statement.executeUpdate("INSERT INTO users VALUES (1, 'Alice')") // Side effect: modifies database
    connection.close()
  }
  ///////////////////////////////////////////////////


}

// Side effect: modifies the console
// Side effect: modifies external state
// Side effect: modifying mutable state
// Side effect: throws an exception
// Side effect: modifies external file system
// Side effect: non-deterministic function
/// Side effect: depends on external data


//Rewrite the following function in a pure-functional style:
object Problem {
  def addTimestamp(str: String): String = {
    val t = System.currentTimeMillis()
    t.toString + ":" + str
  }
}

//Solution
trait IClock {
  def getMillis(): Long
}

class EpochClock extends IClock {
  override def getMillis(): Long = System.currentTimeMillis()
}

object Solution {
  def addTimestamp(str: String, clock: IClock): String = {
    val t = clock.getMillis()
    t.toString + ":" + str
  }
}

//////////////////////////////////////////////////////////////////////////////////
Precondición: Option, Either, Union types, flatMap, map y pattern matching

object UserService {
  private val users = Map(
    1 -> User(1, "Alice", "alice@example.com"),
    2 -> User(2, "Bob", null),  // Missing email
    3 -> User(3, "Charlie", "charlie@example.com")
  )

  def findUserById(id: Int): User =
    if (users.contains(id)) users(id) else null

  def getEmail(user: User): String =
    if (user != null && user.email != null) user.email else null

  def printUserEmail(userId: Int): Unit = {
    val user = findUserById(userId)
    if (user != null) {
      val email = getEmail(user)
      if (email != null) {
        println(s"User email: $email")
      } else {
        println("Email not available")
      }
    } else {
      println("User not found")
    }
  }
}




 
  
  
  
